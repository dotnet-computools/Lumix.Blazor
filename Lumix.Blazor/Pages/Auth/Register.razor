@page "/register"
@using Lumix.Blazor.Data
@using Lumix.Blazor.Services.IServices
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h5">Register</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudForm @ref="Form" Model="@RegisterDto">
            <MudTextField @bind-Value="RegisterDto.UserName" Label="Username" Required="true" />
            <MudTextField @bind-Value="RegisterDto.Email" Label="Email" Required="true" />
            <MudTextField @bind-Value="RegisterDto.Password" Label="Password" InputType="InputType.Password" Required="true" />
            <MudButton OnClick="CreateAccount" Color="Color.Primary" Disabled="@IsProcessing">
                @if (IsProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Register</MudText>
                }
            </MudButton>
        </MudForm>
    </MudItem>
</MudGrid>

@if (success)
{
    <MudAlert Severity="Severity.Success">Registration successful!</MudAlert>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
}

@code {
    private RegisterDto RegisterDto { get; set; } = new();
    private bool success { get; set; }
    private string ErrorMessage { get; set; }
    private bool IsProcessing { get; set; }
    private MudForm Form { get; set; }

    private async Task CreateAccount()
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;
            
            await Form.Validate();
            if (!Form.IsValid)
            {
                ErrorMessage = "Please fill in all required fields correctly.";
                return;
            }

            var result = await AuthService.RegisterAsync(RegisterDto);
            if (result.IsSuccess)
            {
                success = true;
                await Task.Delay(1000); // Show success message briefly
                NavigationManager.NavigateTo("login");
            }
            else
            {
                ErrorMessage = result.ErrorMessage;
                Logger.LogError("Registration failed: {ErrorMessage}", result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred. Please try again.";
            Logger.LogError(ex, "Unhandled exception during registration");
        }
        finally
        {
            IsProcessing = false;
        }
    }
}